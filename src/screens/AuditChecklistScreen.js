// AuditChecklistScreen.js ++++++++
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  ScrollView,
  StyleSheet,
  Alert,
  ActivityIndicator,
  TextInput,
  Button, 
  Image
} from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import { getWithSession, postWithSession } from '../api/apiClient';

export default function AuditChecklistScreen({ route, navigation, addLog }) {
  const { sessionID, audit } = route.params;
  const [auditState, setAudit] = useState(audit);
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [violations, setViolations] = useState({}); 

  useEffect(() => {
    if (!sessionID || !auditState) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ—Ç sessionID –∏–ª–∏ –∞—É–¥–∏—Ç–∞');
      navigation.goBack();
      return;
    }

    const fetchAndCreateAQ = async () => {
      try {
        addLog && addLog(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å–µ–∫—Ü–∏–∏ ${auditState.section?.id || '‚Äî'}...`);
        // GET –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Å–µ–∫—Ü–∏–∏
        const resQuestions = await getWithSession(
          'https://api.directual.com/good/api/v5/data/questions/GetAllQuestions',
          sessionID,
          { filter: JSON.stringify({ section_id: auditState.section?.id, is_active: true }) }
        );

        if (resQuestions.status === 'OK' && Array.isArray(resQuestions.payload)) {
          const sorted = resQuestions.payload.sort((a, b) => (a.sort_order || 0) - (b.sort_order || 0));
          setQuestions(sorted);

          // –°–æ–∑–¥–∞–µ–º audit_questions –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
          for (let i = 0; i < sorted.length; i++) {
            const q = sorted[i];
            const dataAQ = {
              audit_id: auditState.id,
              question_id: q.id,
              score: null,
              sort_order: i + 1,
              question_text_snapshot: q.text
            };
            try {
              const res = await postWithSession(
                'https://api.directual.com/good/api/v5/data/audit_questions/CreateAQ',
                dataAQ,
                sessionID
              );
              addLog && addLog(`–°–æ–∑–¥–∞–Ω AQ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ${i + 1}: ${res.result?.id}`);
            } catch (err) {
              addLog && addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AQ: ${err.message}`);
            }
          }

          // ++++++++++++++++++++++++++++++++++++++++++++++
          // –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ AQ –¥–ª—è —ç—Ç–æ–≥–æ –∞—É–¥–∏—Ç–∞ —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä
          const resAQ = await getWithSession(
            'https://api.directual.com/good/api/v5/data/audit_questions/GetAllAQ',
            sessionID,
            { filter: JSON.stringify({ audit_id: auditState.id }) }
          );

          if (resAQ.status === 'OK' && Array.isArray(resAQ.result)) {
            const sortedAQ = resAQ.result.sort((a, b) => (a.sort_order || 0) - (b.sort_order || 0));
            const aqIds = sortedAQ.map(q => q.id).filter(Boolean);

            // –ê–ª–µ—Ä—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º AQ
            Alert.alert('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ AQ', `${aqIds.length} AQ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞`);
            // –ê–ª–µ—Ä—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º ID
            Alert.alert('Audit Question IDs', aqIds.join(', '));

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö –≤ questions –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            setQuestions(sortedAQ);
          }
          // ++++++++++++++++++++++++++++++++++++++++++++++
        }
      } catch (err) {
        addLog && addLog(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
        Alert.alert('–û—à–∏–±–∫–∞', err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchAndCreateAQ();
  }, [sessionID, auditState]);

  const updateScore = async (aqId, value) => {
    try {
      await postWithSession(
        'https://api.directual.com/good/api/v5/data/audit_questions/CreateAQ',
        { id: aqId, score: value },
        sessionID
      );
      addLog && addLog(`‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω score –¥–ª—è ${aqId}: ${value}`);
    } catch (err) {
      addLog && addLog(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è score: ${err.message}`);
    }
  };

  // ++++++++++++++++++++++++++++++++++++++++++++++
  const addViolation = async (aqId) => {
    const permission = await ImagePicker.requestCameraPermissionsAsync();
    if (!permission.granted) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ');
      return;
    }

    const result = await ImagePicker.launchCameraAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      quality: 0.7,
    });

    if (!result.canceled) {
      const newViolation = { foto: result.assets[0].uri, note: '', audit_question_id: aqId, sent: false };
      setViolations((prev) => ({
        ...prev,
        [aqId]: [...(prev[aqId] || []), newViolation]
      }));
    }
  };

  const updateViolationNote = (aqId, index, text) => {
    setViolations((prev) => {
      const updated = [...(prev[aqId] || [])];
      updated[index].note = text;
      return { ...prev, [aqId]: updated };
    });
  };

  const sendViolation = async (aqId, index) => {
    const v = violations[aqId][index];
    if (!v || v.sent) return;

    try {
      const res = await postWithSession(
        'https://api.directual.com/good/api/v5/data/violations/CreateViolation',
        {
          audit_question_id: aqId,
          foto: v.foto,
          note: v.note
        },
        sessionID
      );

      addLog && addLog(`üì§ –ù–∞—Ä—É—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${aqId}`);
      const updated = [...violations[aqId]];
      updated[index].sent = true;
      setViolations(prev => ({ ...prev, [aqId]: updated }));
    } catch (err) {
      Alert.alert('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ: ${err.message}`);
    }
  };
  // ++++++++++++++++++++++++++++++++++++++++++++++

  if (loading) {
    return (
      <View style={styles.center}>
        <ActivityIndicator size="large" color="#0066cc" />
        <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...</Text>
      </View>
    );
  }

  return (
    <ScrollView contentContainerStyle={styles.container}>
      {auditState && (
        <>
          <Text style={styles.title}>–ê—É–¥–∏—Ç: {auditState.id}</Text>
          <Text style={styles.subtitle}>–ê—É–¥–∏—Ç–æ—Ä: {auditState.auditor?.name || '‚Äî'}</Text>
          <Text style={styles.subtitle}>–ê—É–¥–∏—Ä—É–µ–º—ã–π: {auditState.auditee?.name || '‚Äî'}</Text>
          <Text style={styles.subtitle}>–°–µ–∫—Ü–∏—è: {auditState.section?.name || '‚Äî'}</Text>
        </>
      )}

      <Text style={[styles.title, { marginTop: 20 }]}>–í–æ–ø—Ä–æ—Å—ã</Text>
      {questions.map((q, index) => (
        <View key={q.id || index} style={styles.questionItem}>
          <Text style={styles.questionText}>{index + 1}. {q.text}</Text>

          <TextInput
            style={styles.input}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É"
            keyboardType="numeric"
            onChangeText={(val) => updateScore(q.id, val)}
          />

          <View style={{ marginTop: 10 }}>
            <Button title="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ" onPress={() => addViolation(q.id)} />
            {(violations[q.id] || []).map((v, idx) => (
              <View key={idx} style={styles.violationBlock}>
                <Image source={{ uri: v.foto }} style={styles.image} />
                <TextInput
                  style={styles.noteInput}
                  placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è"
                  value={v.note}
                  onChangeText={(text) => updateViolationNote(q.id, idx, text)}
                />
                <Button
                  title={v.sent ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ'}
                  onPress={() => sendViolation(q.id, idx)}
                  disabled={v.sent}
                  color={v.sent ? '#6c757d' : '#28a745'}
                />
              </View>
            ))}
          </View>
        </View>
      ))}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { flexGrow: 1, padding: 20 },
  center: { flex: 1, justifyContent: 'center', alignItems: 'center' },
  title: { fontSize: 20, fontWeight: 'bold', marginBottom: 5, textAlign: 'center' },
  subtitle: { fontSize: 16, marginBottom: 3, textAlign: 'center', color: '#555' },
  loadingText: { marginTop: 10, fontSize: 16, color: '#555' },
  questionItem: { paddingVertical: 15, borderBottomWidth: 1, borderBottomColor: '#eee' },
  questionText: { fontSize: 16, color: '#333', marginBottom: 10 },
  input: { borderWidth: 1, borderColor: '#ccc', borderRadius: 6, padding: 8, marginBottom: 10 },
  violationBlock: { marginTop: 10, borderWidth: 1, borderColor: '#ddd', borderRadius: 6, padding: 10 },
  image: { width: '100%', height: 150, marginBottom: 10, borderRadius: 6 },
  noteInput: { borderWidth: 1, borderColor: '#ccc', borderRadius: 6, padding: 8, marginBottom: 5 }
});
