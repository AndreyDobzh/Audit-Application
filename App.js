import React, { useState, useEffect } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { View, ScrollView, Text, Button, StyleSheet, Alert } from 'react-native';

// –≠–∫—Ä–∞–Ω—ã
import LoginScreen from './src/screens/LoginScreen';
import EmployeesScreen from './src/screens/EmployeesScreen';
import CreateAuditScreen from './src/screens/CreateAuditScreen';
import AuditChecklistScreen from './src/screens/AuditChecklistScreen';

const Stack = createStackNavigator();

export default function App() {
  const [sessionID, setSessionID] = useState(null);
  const [logs, setLogs] = useState([]);

  const addLog = (message) => {
    const logEntry = `[${new Date().toLocaleTimeString()}] ${message}`;
    setLogs((prev) => [...prev, logEntry]);
    console.log(logEntry);
  };

  // üîÅ –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ sessionID ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Employees
  useEffect(() => {
    if (sessionID) {
      addLog('‚úÖ –°–µ—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚Äî –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Employees');
    }
  }, [sessionID]);

  const handleLoginSuccess = (sid) => {
    addLog(`üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. sessionID: ${sid.substring(0, 10)}...`);
    setSessionID(sid);
    // ‚è© –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    navigationRef.current?.navigate('Employees');
  };

  const handleLogout = () => {
    addLog('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    Alert.alert('–í—ã—Ö–æ–¥', '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?', [
      { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
      {
        text: '–í—ã–π—Ç–∏',
        style: 'destructive',
        onPress: () => {
          setSessionID(null);
          navigationRef.current?.navigate('Login');
        },
      },
    ]);
  };

  // üß≠ –†–µ—Ñ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–∑–≤–Ω–µ
  const navigationRef = React.createRef();

  return (
    <NavigationContainer ref={navigationRef}>
      <Stack.Navigator
        initialRouteName="Login"
        screenOptions={{ headerShown: false }} // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      >
        <Stack.Screen name="Login">
          {(props) => <LoginScreen {...props} onLoginSuccess={handleLoginSuccess} addLog={addLog} />}
        </Stack.Screen>

        <Stack.Screen name="Employees">
          {(props) => (
            <View style={{ flex: 1 }}>
              <EmployeesScreen {...props} sessionID={sessionID} addLog={addLog} />
              <View style={styles.footerButton}>
                <Button title="‚ûï –°–æ–∑–¥–∞—Ç—å –∞—É–¥–∏—Ç" onPress={() => props.navigation.navigate('CreateAudit')} color="#0066cc" />
                <View style={{ height: 10 }} />
                <Button title="üö™ –í—ã–π—Ç–∏" onPress={handleLogout} color="#d9534f" />
              </View>
            </View>
          )}
        </Stack.Screen>

        <Stack.Screen name="AuditChecklist">
        {(props) => (
            <AuditChecklistScreen {...props} addLog={addLog} />
                     )}
        </Stack.Screen>


        <Stack.Screen name="CreateAudit">
          {(props) => (
            <View style={{ flex: 1 }}>
              <CreateAuditScreen {...props} sessionID={sessionID} onBack={() => props.navigation.goBack()} addLog={addLog} />
              <View style={styles.footerButton}>
                <Button title="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º" onPress={() => props.navigation.navigate('Employees')} color="#666" />
              </View>
            </View>
          )}
        </Stack.Screen>
      </Stack.Navigator>

      {/* –î–µ–±–∞–≥-–ø–∞–Ω–µ–ª—å */}
      <View style={styles.debugPanel}>
        <Text style={styles.debugTitle}>üì° –õ–æ–≥–∏</Text>
        <ScrollView style={styles.logContainer} nestedScrollEnabled={true}>
          {logs.length === 0 ? (
            <Text style={styles.logText}>–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...</Text>
          ) : (
            logs.slice(-15).map((log, index) => (
              <Text key={index} style={styles.logText}>
                {log}
              </Text>
            ))
          )}
        </ScrollView>
      </View>
    </NavigationContainer>
  );
}

const styles = StyleSheet.create({
  debugPanel: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    maxHeight: 180,
    backgroundColor: '#1e1e1e',
    borderTopWidth: 1,
    borderColor: '#444',
    padding: 8,
  },
  debugTitle: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 14,
    marginBottom: 4,
  },
  logContainer: {
    maxHeight: 140,
  },
  logText: {
    color: '#ccc',
    fontSize: 12,
    fontFamily: 'monospace',
    marginBottom: 2,
  },
  footerButton: {
    marginHorizontal: 20,
    marginVertical: 8,
  },
});